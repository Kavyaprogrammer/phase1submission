package fixingbugs;

import java.util.ArrayList;
import java.util.Scanner;

public class FixingBugs {

	
	public static void main(String[] args) {
	
	
	System.out.println("Welcome!!");
	
	ArrayList<Integer> al = new ArrayList<Integer>();
	ArrayList<Integer> expenses = new ArrayList<Integer>();
	expenses.add(1020);
	expenses.add(2340);
	expenses.add(45007);
	expenses.add(3000);
	expenses.add(1109);
	expenses.addAll(al);
	optionsSelection(expenses,al);
	}
	private static void optionsSelection(ArrayList<Integer> expenses,ArrayList<Integer> al) {
	String[] arr = {"1. Review my expenditures",
	"2. Add my expenditure",
	"3. Delete my expenditures",
	"4. Sort my expenditures",
	"5. Search for a particular expenditure",
	"6. Exit"
	};
	int[] arr1 = {1,2,3,4,5,6};
	int slen = arr1.length;
	System.out.println();
	for(int i=0; i<slen;i++){
	System.out.println(arr[i]);
	// display the all the Strings mentioned in the String array
	}
	System.out.println("\nEnter your choice:\t");
	Scanner s = new Scanner(System.in);
	int options = s.nextInt();
	for(int j=1;j<=slen;j++){
	if(options==j)
	{
	switch (options)
	{
	case 1:
	System.out.println("Your saved expenses are listed below: \n");
	System.out.println(expenses+"\n");
	optionsSelection(expenses,al);
	break;
	case 2:
	System.out.println("Enter the value to add your Expense: \n");
	int value = s.nextInt();
	expenses.add(value);
	System.out.println("Your value is updated\n");
	expenses.addAll(al);
	System.out.println(expenses+"\n");
	optionsSelection(expenses,al);
	break;
	case 3:
	System.out.println("You are about the delete all your expenses! \nConfirm again by selecting the same option...\n");
	int con_choice = s.nextInt();
	if(con_choice==options){
	expenses.clear();
	System.out.println(expenses+"\n");
	System.out.println("All your expenses are erased!\n");
	} else {
	System.out.println("Oops... try again!");
	}
	optionsSelection(expenses,al);
	break;
	case 4:
	sortExpenses(expenses);
	optionsSelection(expenses,al);
	break;
	case 5:
	searchExpenses(expenses);
	optionsSelection(expenses,al);
	break;
	case 6:
	closeApp();
	break;
	default:
	System.out.println("You have made an invalid choice!");
	break;
	}
	}
	}
	}
	private static void closeApp() {
	System.out.println("Thank you!!");
	}
	private static void searchExpenses(ArrayList<Integer> arrayList) {
	int len = arrayList.size();
	System.out.println("Enter the expense you need to search:\t");
	int exp=new Scanner(System.in).nextInt();
	boolean flag=false;
	for(int val:arrayList) {
	if(exp==val)
	flag=true;
	}
	if(flag)
	System.out.println("The Expense You Searched is Present");
	else
	System.out.println("The Expense is Not Present");
	}
	private static void sortExpenses(ArrayList<Integer> arrayList) {
	int arrlength = arrayList.size(),i=0,temp;
	int []number=new int[arrlength];
	for(int val:arrayList) {
	number[i]=val;
	i++;
	}
	for(i=0;i<arrlength;i++) {
	for(int j=i+1;j<arrlength;j++) {
	if(number[i]>number[j]) {
	temp=number[i];
	number[i]=number[j];
	number[j]=temp;
	}
	}
	}
	arrayList.removeAll(arrayList);
	for(int val:number) {
	arrayList.add(val);
	}
	System.out.println("The sorted Expenses are ");
	System.out.println(arrayList);
	
	}
	
}
